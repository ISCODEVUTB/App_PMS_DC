import json
from flask import Flask, render_template, request, session, jsonify, make_response, Blueprint, redirect, url_for
import jwt
#from flask_jwt import JWT, jwt_required, current_identity
#from collections import Mapping
import requests #importamos requests para poder hacer peticiones a la api
from datetime import datetime, timedelta
from functools import wraps
#from routes.auth import routes_auth
#from routes.prueba import vehiculos 
from dotenv import load_dotenv
#from function_jwt import write_token, validate_token
from flask_mysqldb import MySQL #configuracion de la base de datos
from requests import post #configuracion de la base de datos
from sympy import hn1#configuracion de la base de datos
from werkzeug.security import generate_password_hash, check_password_hash
#from function_jwt import token_required #importamos la funcion para validar el token
#from os import getenv
#import function_jwt

app = Flask(__name__)
#app.register_blueprint(vehiculos, url_prefix='/api')

app.config['SECRET_KEY'] = 'a35db310781d491a841407ae2cb36f50'
app.config['MYSQL_HOST'] = 'us-cdbr-east-06.cleardb.net'#configuracion de la base de datos host
app.config['MYSQL_USER'] = 'bbd292aa23aeaf'#configuracion de la base de datos usuario
app.config['MYSQL_PASSWORD'] = 'ece55924'#configuracion de la base de datos contraseña
app.config['MySQL_DB'] = 'heroku_978ea61906c2949'#configuracion de la base de datos

mysql = MySQL(app)  #se usa para mostrar los datos de la tabla vehiculo

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = None
        if 'x-access-tokens' in request.headers:
            token = request.headers['x-access-tokens']
        if not token:
            return jsonify({'mesage': 'Token is missing!'}) 
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'])
            print("exelente")
        except:
            return jsonify({'message': 'el token no es valido!'})
        return f(*args, **kwargs)
    return decorated
#validar inicio de seccion con la base de datos conectada
def validar_usuario(correo, Contraseña):
    try:#el try es para que si hay un error no se caiga el programa
        
        cursor = mysql.connection.cursor()#se usa para conectar con la base de datos
        url = "select Contraseña from heroku_978ea61906c2949.usuario where Correo = '{}'".format(correo)
        print(url)
        cursor.execute(url)#se usa para mostrar los datos de la tabla usuario
        datos = cursor.fetchall()#el fetchall es para que se muestren todos los datos de la consulta
        clave = datos[0][0]
        if len(datos) > 0:#se crea un ciclo for para que se muestren todos los datos de la consulta
            return check_password_hash(clave,Contraseña)
        else:
            print("No existe el usuario")
    except Exception as e:#el except es para que si hay un error no se caiga el programa
        return jsonify({'message': 'error'})

@app.route('/login', methods=['POST','GET'])
def login():
    if request.method == 'POST':
        #data = request.get_json()
        #correo = data['username']
        #contraseña = data['password']
        auth = request.authorization
        if not auth or not auth.username or not auth.password:
            return make_response('Could not verify', 401, {'WWW-Authenticate' : 'Basic realm="Login required!"'})
        cursor = mysql.connection.cursor()#se usa para conectar con la base de datos
        if validar_usuario(auth.username,auth.password) == True:

            cursor.execute("select * from heroku_978ea61906c2949.usuario where Correo = '{0}'".format(auth.username))
            datos = cursor.fetchall()
            #for fila in datos:
            #    user = fila[0]
            token = jwt.encode({'public_id': datos[0][0],'exp': str(datetime.utcnow() + timedelta(minutes=30))},app.config['SECRET_KEY'])
            return jsonify({'token': token})
        else:
            return jsonify({"message": "Invalid username or password"})
            #return make_response('No se pudo verificar', 403, {'WWW-Authenticate' : 'Basic realm="Login required!"'})
            #response = jsonify({"message": "Invalid username or password"})
            #response.status_code = 404
            #return response
@app.route('/ver')
@token_required
def ver_vehiculos():
    url = 'https://api-inventario-gv.herokuapp.com/stock'
    data = requests.get(url)
    inventario=[]
    if data.status_code == 200:
        data = data.json()
        if data is not None:
            for e in data['vehiculos']:
                dato = { 'Caracteristica': e['Caracteristica'], 'Id_vehiculo': e['Id_vehiculo'],
                        'Modelo': e['Modelo'], 'Nombre': e['Nombre'],
                        'Precio': e['Precio'] , 'Tipo': e['Tipo']}#se crea un diccionario para que se muestren los datos de los vehiculos
                inventario.append(dato)#se agrega los datos de los vehiculos a la lista
            return jsonify({'vehiculos': inventario})  

if __name__ == '__main__':
    #load_dotenv()
    app.run(debug=True, port="4000", host="0.0.0.0")